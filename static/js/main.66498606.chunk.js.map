{"version":3,"sources":["store/types.ts","store/actions/menuAction.ts","components/BurgerMenu.tsx","components/Navbar.tsx","assets/clouds2.jpg","store/actions/alertAction.ts","components/Search.tsx","store/actions/weatherAction.ts","components/Alert.tsx","components/Weather.tsx","App.tsx","store/reducers/weatherReducer.ts","store/reducers/alertReducer.ts","store/reducers/menuReducer.ts","store/index.ts","index.tsx"],"names":["GET_WEATHER","SET_LOADING","SET_ERROR","SET_ALERT","SET_MENU","setMenu","show","type","payload","BurgerMenu","items","onClose","styles","textColor","color","onClick","className","map","item","href","style","Navbar","title","dispatch","useDispatch","showMenu","useSelector","state","menu","role","setAlert","message","Search","useState","city","setCity","onSubmit","e","preventDefault","trim","a","fetch","process","res","ok","json","resData","Error","errorMessage","getWeather","placeholder","maxWidth","value","onChange","currentTarget","margin","Alert","justifyContent","Weather","data","fahrenheit","main","temp","toFixed","celsius","marginBottom","name","sys","country","alignItems","weather","description","src","icon","alt","humidity","pressure","wind","speed","App","container","backgroundImage","clouds","backgroundPosition","backgroundSize","backgroundRepeat","width","height","overlay","background","overflow","Zindex","weatherData","loading","error","alertMsg","alert","initialState","weatherReducer","action","alertReducer","menuReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66498606.chunk.js","sourcesContent":["export const GET_WEATHER = 'GET_WEATHER';\nexport const SET_LOADING = 'SET_LOADING';\nexport const SET_ERROR = 'SET_ERROR';\nexport const SET_ALERT = 'SET_ALERT';\nexport const SET_MENU = 'SET_MENU';\n\nexport interface weather {\n    id: number\n    icon: string\n    main: string\n    description: string\n}\n\nexport interface WeatherData {\n    base: string\n    clouds: {\n        all: number\n    }\n    cod: number\n    coord: {\n        lon: number\n        lat: number\n    }\n    dt: number\n    id: number\n    main: {\n        feels_like: number\n        humidity: number\n        pressure: number\n        temp: number\n        temp_max: number\n        temp_min: number\n    }\n    name: string\n    sys: {\n        country: string\n        id: string\n        sunrise: string\n        sunset: string\n        type: number\n    }\n    timezone: number\n    visibility: number\n    weather: weather[]\n    wind: {\n        speed: number\n        deg: number\n    }\n}\n\nexport interface WeatherError {\n    cod: string\n    message: string\n}\n\nexport interface WeatherState {\n    data: WeatherData | null\n    loading: boolean\n    error: string\n}\n\ninterface GetWeatherAction {\n    type: typeof GET_WEATHER\n    payload: WeatherData\n}\n\ninterface SetLoadingAction {\n    type: typeof SET_LOADING\n}\n\ninterface SetErrorAction {\n    type: typeof SET_ERROR\n    payload: string\n}\n\nexport type WeatherAction = GetWeatherAction | SetLoadingAction | SetErrorAction;\n\nexport interface AlertAction {\n    type: typeof SET_ALERT\n    payload: string\n}\n\nexport interface AlertState {\n    message: string\n}\n\nexport interface MenuAction {\n    type: typeof SET_MENU\n    payload: boolean\n}\n\nexport interface MenuState {\n    show: boolean\n}\n\n\n","import { SET_MENU, MenuAction } from \"../types\";\n\nexport const setMenu = (show: boolean): MenuAction => {\n    return {\n        type: SET_MENU,\n        payload: show\n    }\n}\n","import React, { FC } from 'react';\n\ninterface MenuProps {\n    items: string[]\n    onClose: () => void\n}\n\nconst BurgerMenu: FC<MenuProps> = ({ items, onClose }) => {\n\n    const styles = {\n        textColor: {\n            color: 'white'\n        }\n    }\n\n    return (\n        <div onClick={onClose} >\n            <aside className=\"menu\" >\n                <ul className=\"menu-list\">\n                    {items.map(item => <a href=\"App.tsx\" style={styles.textColor}>{item}</a>)}\n                </ul>\n            </aside>\n        </div>\n\n    )\n}\n\nexport default BurgerMenu;","import React, { FC } from 'react';\n\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setMenu } from '../store/actions/menuAction';\nimport { RootState } from '../store';\n\nimport BurgerMenu from '../components/BurgerMenu';\n\n\ninterface NavItem {\n    title: string\n    items: string[]\n\n}\n\nconst Navbar: FC<NavItem> = ({ items, title }) => {\n\n    let navbarItems: string[] = [\"Home\", \"Contact Us\", \"About Us\"]\n    const dispatch = useDispatch();\n    const showMenu = useSelector((state: RootState) => state.menu.show);\n\n\n    const burgerMenuHandler = () => {\n        if (!showMenu) {\n            return dispatch(setMenu(true))\n        }\n        if (showMenu) {\n            return dispatch(setMenu(false))\n        }\n    }\n\n    return (\n        <nav className=\"navbar is-info\" role=\"navigation\" aria-label=\"main navigation\">\n            <div className=\"navbar-brand\">\n                <a className=\"navbar-item\" href=\"https://bulma.io\">\n                    <h2>{title}</h2>\n                </a>\n                <button className=\"navbar-burger\" aria-label=\"menu\" aria-expanded=\"false\" onClick={burgerMenuHandler} data-target=\"navbarBasicExample\">\n                    <span aria-hidden=\"true\"></span>\n                    <span aria-hidden=\"true\"></span>\n                    <span aria-hidden=\"true\"></span>\n                </button>\n            </div>\n\n            <div className=\"navbar-menu\">\n                <div className=\"navbar-end\">\n                    {items.map(item => <a href=\"App.tsx\" className=\"navbar-item\">{item}</a>)}\n                </div>\n            </div>\n            {showMenu && <BurgerMenu items={navbarItems} onClose={() => dispatch(setMenu(false))} />}\n        </nav >\n    )\n}\n\nexport default Navbar;","export default __webpack_public_path__ + \"static/media/clouds2.3ea150af.jpg\";","import { SET_ALERT, AlertAction } from \"../types\";\n\nexport const setAlert = (message: string): AlertAction => {\n    return {\n        type: SET_ALERT,\n        payload: message\n    }\n}\n\n","import React, { FC, FormEvent, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setAlert } from '../store/actions/alertAction';\nimport { getWeather, setLoading } from '../store/actions/weatherAction';\n\n\n\ninterface SearchProps {\n    title: string\n}\n\n\n\nconst Search: FC<SearchProps> = ({ title }) => {\n\n    const styles = {\n        textColor: {\n            color: 'white'\n        }\n    }\n\n    const dispatch = useDispatch();\n    const [city, setCity] = useState('');\n\n    // this function changes and sets the change\n    const changeHandler = (e: FormEvent<HTMLInputElement>) => {\n        setCity(e.currentTarget.value);\n    }\n\n    const submitHandler = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n\n        if (city.trim() === '') {\n            return dispatch(setAlert('city is required!'));\n        }\n        dispatch(setLoading());\n        dispatch(getWeather(city));\n        setCity('');\n    }\n    return (\n        <div className=\"hero has-text-centered pt-5\">\n            <div className=\"container\">\n                <div style={styles.textColor} className=\"title\">{title}</div>\n                <form className=\"py-5\" onSubmit={submitHandler}>\n                    <input\n                        type=\"text\"\n                        className=\"input has-text-centered mb-2\"\n                        placeholder=\"Enter city name\"\n                        style={{ maxWidth: 300 }}\n                        value={city}\n                        onChange={changeHandler}\n                    />\n                    <button className=\"button is-info is-fullwidth\" style={{ maxWidth: 300, margin: '0 auto' }}>\n                        Search\n                    </button>\n                </form>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Search;","import { ThunkAction } from \"redux-thunk\";\nimport { RootState } from '..';\nimport { WeatherAction, WeatherData, WeatherError, GET_WEATHER, SET_LOADING, SET_ERROR } from \"../types\";\n\nexport const getWeather = (city: string): ThunkAction<void, RootState, null, WeatherAction> => {\n    const api_key = process.env.REACT_APP_API_KEY\n    return async dispatch => {\n        try {\n            const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${api_key}`);\n            if (!res.ok) {\n                const resData: WeatherError = await res.json();\n                throw new Error(resData.message);\n            }\n            const resData: WeatherData = await res.json();\n            dispatch({\n                type: GET_WEATHER,\n                payload: resData\n            })\n        } catch (error) {\n            let errorMessage = \"Failed\";\n            if (error instanceof Error) {\n                errorMessage = error.message;\n            }\n            dispatch({\n                type: SET_ERROR,\n                payload: errorMessage\n            })\n        }\n    }\n}\n\nexport const setLoading = (): WeatherAction => {\n    return {\n        type: SET_LOADING\n    }\n}\n\nexport const setError = (): WeatherAction => {\n    return {\n        type: SET_ERROR,\n        payload: ''\n    }\n}","import React, { FC } from 'react';\n\n\ninterface AlertProps {\n    message: string;\n    onClose: () => void\n}\n\nconst Alert: FC<AlertProps> = ({ message, onClose }) => {\n    return (\n        <div className=\"modal is-active has-text-centered\">\n            <div className=\"modal-background\" onClick={onClose}>\n                <div className=\"modal-card\">\n                    <header className=\"modal-card-head has-background-danger\">\n                        <p className=\"modal-card-title has-text-white\">{message}</p>\n                    </header>\n                    <footer className=\"modal-card-foot\" style={{ justifyContent: 'center' }}>\n                        <button className=\"button\" onClick={onClose}>Close</button>\n                    </footer>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default Alert;","import React, { FC } from 'react';\nimport { WeatherData } from '../store/types';\n\n\nimport './Weather.css';\n\ninterface WeatherProps {\n    data: WeatherData\n}\n\nconst Weather: FC<WeatherProps> = ({ data }) => {\n\n    const styles = {\n        textColor: {\n            color: 'white'\n        }\n    }\n\n    const fahrenheit = (data.main.temp * 1.8 - 459.67).toFixed(2);\n    const celsius = (data.main.temp - 273.15).toFixed(2);\n\n    return (\n        <section className=\"section\">\n            <div className=\"container\">\n                <h1 className=\"title has-text-centered\" style={{ marginBottom: 50, color: 'white' }}>{data.name} - {data.sys.country}</h1>\n                <div className=\"level\" style={{ alignItems: 'flex-start', color: 'white' }}>\n                    <div className=\"level-item has-text-centered\">\n                        <div>\n                            <p className=\"heading\">{data.weather[0].description}</p>\n                            <p className=\"title pt-5\">\n                                <img src={`http://openweathermap.org/img/wn/${data.weather[0].icon}.png`} alt=\"\" />\n                            </p>\n                        </div>\n                    </div>\n                    <div className=\"level-item has-text-centered\">\n                        <div>\n                            <p className=\"heading\">temp</p>\n                            <div style={styles.textColor} className=\"pt-5\">\n                                <p className=\"mb-2\">{data.main.temp}K</p>\n                                <p className=\"mb-2\">{fahrenheit}<sup>&#5457;</sup></p>\n                                <p>{celsius}<sup>&#8451;</sup></p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"level-item has-text-centered\">\n                        <div>\n                            <p className=\"heading\">humidity</p>\n                            <p className=\"pt-5\" style={styles.textColor}>{data.main.humidity}</p>\n                        </div>\n                    </div>\n                    <div className=\"level-item has-text-centered\">\n                        <div>\n                            <p className=\"heading\">pressure</p>\n                            <p className=\"pt-5\" style={styles.textColor}>{data.main.pressure}</p>\n                        </div>\n                    </div>\n                    <div className=\"level-item has-text-centered\">\n                        <div>\n                            <p className=\"heading\">wind</p>\n                            <p className=\"pt-5\" style={styles.textColor}>{data.wind.speed} m/s</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n    )\n}\n\nexport default Weather;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Navbar from './components/Navbar';\n\nimport './App.css';\nimport clouds from './assets/clouds2.jpg';\n//import BackgroundImage from './components/BackgroundImage';\n\nimport { RootState } from './store';\nimport Search from './components/Search';\nimport Alert from './components/Alert';\nimport Weather from './components/Weather';\n//import BurgerMenu from './components/BurgerMenu';\n\n\nimport { setAlert } from './store/actions/alertAction';\nimport { setError } from './store/actions/weatherAction';\nimport { setMenu } from './store/actions/menuAction';\n\nfunction App() {\n  const styles = {\n    container: {\n      backgroundImage: `url(${clouds})`,\n      backgroundPosition: 'center',\n      backgroundSize: 'cover',\n      backgroundRepeat: 'no-repeat',\n      width: '100vw',\n      height: '100vh'\n    },\n    overlay: {\n      background: 'rgba(39,62,84,0.82)',\n      overflow: 'hidden',\n      height: '100%',\n      Zindex: '2'\n    }\n  };\n  const dispatch = useDispatch();\n  const weatherData = useSelector((state: RootState) => state.weather.data);\n  const loading = useSelector((state: RootState) => state.weather.loading);\n  const error = useSelector((state: RootState) => state.weather.error);\n  const alertMsg = useSelector((state: RootState) => state.alert.message);\n  const showMenu = useSelector((state: RootState) => state.menu.show);\n\n  const burgerMenuHandler = () => {\n    if (showMenu) {\n      return dispatch(setMenu(false))\n    }\n  }\n\n  let navbarItems: string[] = [\"Home\", \"About Us\", \"Contact Us\"]\n\n  return (\n    <div style={styles.container}>\n      <div style={styles.overlay} onClick={burgerMenuHandler}>\n        <Navbar\n          title=\"Weather\"\n          items={navbarItems}\n        />\n\n\n        <Search title=\"Enter City Name\" />\n        {loading ? <h2 className=\"is-size-3 py-2\">Loading...</h2> : weatherData && <Weather data={weatherData} />}\n\n        {alertMsg && <Alert message={alertMsg} onClose={() => dispatch(setAlert(''))} />}\n        {error && <Alert message={error} onClose={() => dispatch(setError())} />}\n      </div>\n    </div >\n\n  );\n}\n\nexport default App;\n","import { WeatherState, WeatherAction, GET_WEATHER, SET_ERROR, SET_LOADING } from '../types';\n\nconst initialState: WeatherState = {\n    data: null,\n    loading: false,\n    error: ''\n}\n\nconst weatherReducer = (state = initialState, action: WeatherAction): WeatherState => {\n    switch (action.type) {\n        case GET_WEATHER:\n            return {\n                data: action.payload,\n                loading: false,\n                error: ''\n            }\n        case SET_LOADING:\n            return {\n                ...state,\n                loading: true\n            }\n        case SET_ERROR:\n            return {\n                ...state,\n                error: action.payload,\n                loading: false\n            }\n        default:\n            return state;\n    }\n}\n\nexport default weatherReducer;","import { AlertState, AlertAction, SET_ALERT } from \"../types\";\n\nconst initialState: AlertState = {\n    message: ''\n}\n\nconst alertReducer = (state = initialState, action: AlertAction): AlertState => {\n    switch (action.type) {\n        case SET_ALERT:\n            return {\n                message: action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport default alertReducer;\n\n","import { MenuState, MenuAction, SET_MENU } from \"../types\";\n\nconst initialState: MenuState = {\n    show: false,\n}\n\n\n\nexport const menuReducer = (state = initialState, action: MenuAction): MenuState => {\n    switch (action.type) {\n        case SET_MENU:\n            return {\n                show: action.payload\n            }\n        default:\n            return state;\n\n    }\n}\n\nexport default menuReducer;\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from 'redux-thunk';\n\nimport weatherReducer from \"./reducers/weatherReducer\";\nimport alertReducer from \"./reducers/alertReducer\";\nimport menuReducer from './reducers/menuReducer';\n\nconst rootReducer = combineReducers({\n    weather: weatherReducer,\n    alert: alertReducer,\n    menu: menuReducer\n})\n\nconst store = createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(thunk))\n)\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport default store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport '../node_modules/bulma/css/bulma.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}